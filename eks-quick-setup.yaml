AWSTemplateFormatVersion: "2010-09-09"
Description: EKS cluster using a VPC with two public subnets

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
    Default: eks-quick-setup

  MinWorkerNodes:
    Type: Number
    Description: Minimum number of worker nodes to create
    Default: 1

  MaxWorkerNodes:
    Type: Number
    Description: Maximum number of worker nodes to create
    Default: 3

  DesiredWorkerNodes:
    Type: Number
    Description: Desired number of worker nodes to create
    Default: 1

  WorkerNodesInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t2.medium

  AmiId:
    Type: String
    Description: Ami ID of the worker nodes
    Default: AL2_x86_64

  WorkerNodesVolumeSize:
    Type: Number
    Description: EBS volume size for instances
    Default: 20

Mappings:
  VpcIpRanges:
    Option1:
      VPC: 10.0.0.0/16 # 00001010.00000000.xxxxxxxx.xxxxxxxx
      Subnet1: 10.0.0.0/18 # 00001010.00000000.00xxxxxx.xxxxxxxx
      Subnet2: 10.0.64.0/18 # 00001010.00000000.01xxxxxx.xxxxxxxx

Resources:
  #============================================================================#
  # VPC
  #============================================================================#

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - VpcIpRanges
        - Option1
        - VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap
        - VpcIpRanges
        - Option1
        - Subnet1
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap
        - VpcIpRanges
        - Option1
        - Subnet2
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnets

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    # DependsOn is mandatory because route targets InternetGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  #============================================================================#
  # Cluster
  #============================================================================#

  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref AWS::StackName
      Version: "1.31"
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        EndpointPublicAccess: true
        EndpointPrivateAccess: true

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ClusterRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - eks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Policies:
        - PolicyName: EKSClusterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:*
                  - ec2:Describe*
                Resource: "*"

  #============================================================================#
  # Cluster security group
  #============================================================================#

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Security group for the elastic network interfaces between the
        cluster and the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ClusterSecurityGroup

  ClusterIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ClusterSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ClusterEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ClusterSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ClusterEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description:
        Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods
        running extension API servers)
      GroupId: !Ref ClusterSecurityGroup
      DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#

  WorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WorkerNodesSecurityGroup
        - Key: !Sub kubernetes.io/cluster/${Cluster}
          Value: owned

  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
      IpProtocol: "-1"

  WorkerNodesIngressFromClusterKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from cluster
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerNodesIngressFromClusterHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from cluster (for pods
        running extension API servers)
      GroupId: !Ref WorkerNodesSecurityGroup
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes
  #============================================================================#

  WorkerNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref AWS::StackName
      NodeRole: !GetAtt WorkerNodesRole.Arn
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate:
        Id: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      ScalingConfig:
        DesiredSize: !Ref DesiredWorkerNodes
        MaxSize: !Ref MaxWorkerNodes
        MinSize: !Ref MinWorkerNodes
      AmiType: !Ref AmiId
      Tags:
        Name: "eks-nodegroup"
        Environment: "dev"

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref WorkerNodesInstanceType
        # KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WorkerNodesSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref WorkerNodesVolumeSize
        UserData: !Base64 |
          MIME-Version: 1.0
          Content-Type: multipart/mixed; boundary="==BOUNDARY=="

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"

          #!/bin/bash
          set -o xtrace
          # Custom user data commands

          --==BOUNDARY==--

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Cluster
    Properties:
      InstanceProfileName: IamInstanceProfile
      Path: /
      Roles:
        - !Ref InstanceProfileRole

  WorkerNodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerNodesRole

  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-WorkerNodesRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Policies:
        - PolicyName: EKSWorkerNodePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - eks:DescribeCluster
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DeleteLaunchConfiguration
                  - autoscaling:DescribeTags
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - ec2:DescribeInstances
                  - ec2:CreateTags
                  - ec2:DescribeTags
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeStatus
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:CreateVolume
                  - ec2:ModifyInstanceAttribute
                  - ec2:TerminateInstances
                Resource: "*"

  InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-InstanceProfileRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # TODO: Reduce permissions in production

Outputs:
  WorkerNodesRoleArn:
    # Needed for the last step "enable worker nodes to join the cluster":
    # https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html#eks-create-cluster
    Description: ARN of the worker nodes role
    Value: !GetAtt WorkerNodesRole.Arn
