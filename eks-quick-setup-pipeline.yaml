AWSTemplateFormatVersion: "2010-09-09"
Description: github-codepipeline

Parameters:
  # "NoEcho" is set to true, for security, so token won't be visible when examining the resulting stack
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 39
    MaxLength: 93
    AllowedPattern: "[A-Za-z0-9_]*"

  GitHubOwner:
    Type: String
    Default: naordl
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepo:
    Type: String
    Default: eks-quick-setup
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubBranch:
    Type: String
    Default: main
    AllowedPattern: "[A-Za-z0-9-]+"

  PipelineName:
    Type: String
    Default: eks-quick-setup-pipeline
    AllowedPattern: "[A-Za-z0-9-]+"

  ApplicationStackName:
    Type: String
    Default: eks-quick-setup
    AllowedPattern: "[A-Za-z0-9-]+"

  TemplateName:
    Type: String
    Default: eks-quick-setup.yaml

  IAMUserName:
    Type: String
    Default: roland

  # "NoEcho" is set to true, for security, so token won't be visible when examining the resulting stack
  AccountID:
    Type: String
    Default: ""
    NoEcho: true

Resources:
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CloudFormationDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CloudformationRole.Arn
                StackName: !Ref ApplicationStackName
                TemplatePath: !Sub "SourceCode::${TemplateName}"
              RunOrder: 1

  # "GithubWebhook" has two purposes:
  # Updates are pushed from GitHub, rather than AWS having to pull
  # We can filter for required changes
  GithubWebhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: "true"
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${PipelineName}-CodePipelineRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole

  CodePipelineServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - ecr:DescribeImages
            Resource: "*"
            Effect: Allow
          - Action:
              - iam:CreateRole
            Resource: "*"
            Effect: Allow
      PolicyName: CodePipelineServiceRolePolicy
      Roles:
        - !Ref CodePipelineRole

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${PipelineName}-CloudformationRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
            AWS:
              - !Sub arn:aws:iam::${AccountID}:user/${IAMUserName}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # TODO: Reduce permissions in production

  IAMUserCfRoleAttachment:
    Type: AWS::IAM::UserPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: UserCfRole
            Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: !GetAtt CloudformationRole.Arn
      PolicyName: IAMUserEksAttachment
      UserName: !Ref IAMUserName
